generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                String       @id @default(cuid())
  email             String       @unique
  password          String
  name              String?
  age               Int?
  gender            String?
  createdAt         DateTime     @default(now())
  bio               String?
  yearsOfExperience Int?
  role              String?
  githubUrl         String?
  technologies      Technology[]
  likes             Like[]       @relation("UserLikes")
  likedBy           Like[]       @relation("UserLiked")
  matchesAsUserA    Match[]      @relation("UserAMatches")
  matchesAsUserB    Match[]      @relation("UserBMatches")
  sentMessages      Message[]    @relation("MessageSender")
}

model Technology {
  id    String @id @default(cuid())
  name  String @unique
  type  TechType
  users User[]
}

enum TechType {
  LANGUAGE
  FRAMEWORK
  DATABASE
  TOOL
  LIBRARY
}

model Like {
  id        String   @id @default(cuid())
  likerId   String
  likedId   String
  createdAt DateTime @default(now())
  liker User @relation("UserLikes", fields: [likerId], references: [id])
  liked User @relation("UserLiked", fields: [likedId], references: [id])
  @@unique([likerId, likedId])
}

model Match {
  id        String    @id @default(cuid())
  userAId   String
  userBId   String
  createdAt DateTime  @default(now())
  userA     User      @relation("UserAMatches", fields: [userAId], references: [id])
  userB     User      @relation("UserBMatches", fields: [userBId], references: [id])
  messages  Message[]
  @@unique([userAId, userBId])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  senderId  String
  matchId   String
  sender    User     @relation("MessageSender", fields: [senderId], references: [id])
  match     Match    @relation(fields: [matchId], references: [id])
}